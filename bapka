#!/usr/bin/env python3

import argparse
import glob
import os
import re
import subprocess

TMPDIR = "/tmp/bapka"


def apktool_decompile(file):
    print("APKTOOL: Starting to decompile")
    outdir = os.path.join(TMPDIR, "out")
    try:
        subprocess.run(
            ["apktool", "d", file, "-b", "-f", "-r", "-o", outdir], check=True
        )
    except Exception as e:
        print(f"APKTOOL: Failed to decompile the apk: {e}")
        exit(1)
    print("APKTOOL: Decompiled successfully")
    return outdir


def grep(root_dir, pattern) -> None | re.Match:
    pattern = re.compile(pattern)
    for path in glob.iglob("**/*.smali", root_dir=root_dir, recursive=True):
        abspath = os.path.join(root_dir, path)
        with open(abspath, "r") as f:
            for line in f:
                result = re.search(pattern, line)
                if result is not None:
                    return result

    return None


def get_bmp_version(dir):
    maybe_ver = get_bmp3_version(dir)
    if maybe_ver:
        return maybe_ver
    
    maybe_ver = get_bmp2_version(dir)
    if maybe_ver:
        return maybe_ver

    print("ERROR: No BMP version detected.")
    exit(1)


def get_bmp2_version(dir):
    print("Searching for BMP 2.X.X")
    result = grep(dir, "Initializing Akamai BMP SDK Version (.+)\"")
    if result is None:
        return None
    return result.groups()[0]


def get_bmp3_version(dir):
    print("Searching for BMP 3.X.X")
    result = grep(dir, "BMPSDK/(.+) \\(")
    if result is None:
        return None
    return result.groups()[0]


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("filename", help=".apk file to analyze")
    args = parser.parse_args()
    config = vars(args)

    decompiled_dir = apktool_decompile(config["filename"])
    bmp_version = get_bmp_version(decompiled_dir)
    print("Akamai BMP found!")
    print(f"BMP Version: {bmp_version}")
